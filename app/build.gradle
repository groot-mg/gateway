import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
	alias(libs.plugins.spring.boot)
	alias(libs.plugins.spring.dependency.management)
	alias(libs.plugins.git.properties)
	alias(libs.plugins.axion.release)
	alias(libs.plugins.lombok)
	alias(libs.plugins.jacoco)
	alias(libs.plugins.application)
	alias(libs.plugins.java)
}

jacoco {
    toolVersion = "0.8.12"
}

ext {
    set('springCloudVersion', "2023.0.4")
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

scmVersion {
	tag { prefix = 'v' }
	versionIncrementer 'incrementMinor'
}
project.version = scmVersion.version

bootJar {
	archiveFileName = "${rootProject.name}.jar"
}

springBoot {
	mainClass = "com.generoso.gateway.GatewayApplication"
	buildInfo {
		properties {
			name = rootProject.name
			version = project.version
			additional = [
				host           : InetAddress.localHost.hostName,
				hostAddress    : InetAddress.localHost.getHostAddress(),
				operatingSystem: DefaultNativePlatform.currentOperatingSystem.getInternalOs().toString()
			]
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
}

dependencies {
	implementation(libs.spring.boot.starter)
	implementation(libs.spring.boot.starter.actuator)
	implementation(libs.spring.boot.starter.oauth2.client)
	implementation(libs.spring.boot.starter.gateway)
	implementation(libs.spring.boot.starter.eureka.client)
	implementation(libs.spring.boot.starter.docs.webflux)

	implementation(libs.micrometer.prometheus)
  implementation(libs.google.guava)

	testImplementation(libs.spring.boot.starter.test)
	testImplementation(libs.reactor.test)
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

test.finalizedBy jacocoTestReport
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				"com/generoso/gateway/GatewayApplication.class",
				"**Config.class"
			])
		}))
	}
	reports {
		xml.required = true
	}
}
