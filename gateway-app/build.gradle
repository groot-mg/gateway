import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.5'
    id "com.gorylenko.gradle-git-properties" version '2.4.1'
    id 'pl.allegro.tech.build.axion-release' version '1.15.5'
    id 'jacoco'
    id 'application'
    id 'io.freefair.lombok'
    id 'java'
}

jacoco {
    toolVersion = "0.8.8"
}

ext {
    set('springCloudVersion', "2022.0.4")
    set('springDocVersion', '2.2.0')
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

scmVersion {
    tag { prefix = rootProject.name + '-' }
    versionIncrementer 'incrementMinor'
}
project.version = scmVersion.version

def commonJarConfigClosure = {
    archiveName = "${rootProject.name}.jar"
}

bootJar commonJarConfigClosure

springBoot {
    mainClass = "com.generoso.gateway.GatewayApplication"
    buildInfo {
        properties {
            name = rootProject.name
            version = project.version
            additional = [
                    host           : InetAddress.localHost.hostName,
                    hostAddress    : InetAddress.localHost.getHostAddress(),
                    operatingSystem: DefaultNativePlatform.currentOperatingSystem.getInternalOs().toString()
            ]
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

//    implementation("org.springdoc:springdoc-openapi-webflux-ui:${springDocVersion}")
    implementation("org.springdoc:springdoc-openapi-starter-webflux-ui:${springDocVersion}")

    runtimeOnly "io.micrometer:micrometer-registry-prometheus"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

test.finalizedBy jacocoTestReport
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/generoso/gateway/GatewayApplication.class",
                    "**Config.class"
            ])
        }))
    }
    reports {
        xml.enabled true
    }
}