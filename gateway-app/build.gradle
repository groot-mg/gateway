import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id "com.gorylenko.gradle-git-properties" version '2.3.2'
    id 'pl.allegro.tech.build.axion-release' version '1.14.0'
    id 'java'
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
}

ext {
    gatewayVersion = '3.1.3'
    eurekaClientVersion = '3.1.3'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

scmVersion {
    tag { prefix = rootProject.name + '-' }
    versionIncrementer 'incrementMinor'
}
project.version = scmVersion.version

def commonJarConfigClosure = {
    archiveName = "${rootProject.name}.jar"
}

bootJar commonJarConfigClosure

springBoot {
    buildInfo {
        properties {
            name = rootProject.name
            version = project.version
            additional = [
                    host           : InetAddress.localHost.hostName,
                    hostAddress    : InetAddress.localHost.getHostAddress(),
                    operatingSystem: DefaultNativePlatform.currentOperatingSystem.getInternalOs().toString()
            ]
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.cloud:spring-cloud-starter-gateway:${gatewayVersion}" // not resolved by dependency-management plugin
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${eurekaClientVersion}" // not resolved by dependency-management plugin

    implementation "io.micrometer:micrometer-registry-prometheus"
}

test {
    useJUnitPlatform()
}

test.finalizedBy jacocoTestReport
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/generoso/gateway/GatewayApplication.class"
            ])
        }))
    }
    reports {
        xml.enabled true
    }
}